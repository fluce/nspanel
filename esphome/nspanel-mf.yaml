# NSPanel YAML by marcfager. Please check github for credits: https://github.com/marcfager/nspanel-mf
# Version 2022-01-19

substitutions:
  # Name the device and it's entities
  device_name: nspanel-dev
  freeze_preset_name: "Hors gel"
  auto_preset_name: "Auto"
  master_trigger_id: binary_sensor.seuil_activation_chauffage
  auto_trigger_1_id: binary_sensor.trv_salon_1_heating
  auto_trigger_2_id: binary_sensor.trv_salon_2_heating
  auto_trigger_3_id: binary_sensor.trv_chambre_heating
  auto_trigger_4_id: binary_sensor.trv_bureau_heating
  auto_trigger_5_id: binary_sensor.trv_salle_de_bain_heating

# Example config.yaml
esphome:
  name: nspanel
  comment: $device_name
  includes: custom.h

esp32:
  board: esp32dev

external_components:
  - source:
      type: local
      path: ../../esphome/esphome/esphome/components
    components: [ thermostat ]

# Wifi settings. Add these to your secrets.yaml. fast_connect must be true for a hidden ssid.
wifi:
  ssid: !secret ssid
  password: !secret wifi_pwd
  fast_connect: !secret wifi_fast_connect

# API. Add api_pwd to your secrets.yaml.
api:
  password: !secret api_pwd
  services:
    # Service to play a rtttl tone
    - service: play_rtttl
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
    # Service to update the HMI file
    - service: upload_tft
      then:
        - lambda: 'id(disp1)->upload_tft();'
    # Service to control the visible page from Home Assistant
    - service: set_page
      variables:
        page: int
      then:
        - lambda: id(disp1).send_command_printf("page %i", page);
    # Service to show a notification on the screen for 15 s. Tap or wait to close
    - service: notification
      variables:
        header: string
        message: string
      then:
        - lambda: |-
            id(disp1).set_component_text_printf("Notifications.head", "%s", header.c_str());
            id(disp1).set_component_text_printf("Notifications.body", "%s", message.c_str());
            id(disp1).send_command_printf("page Notifications");
        - rtttl.play: "twobits:d=4,o=5,b=220:c6,8g,8g,a,g,p,b,c6"
        - delay: 15s
        - lambda: |-
            id(disp1).send_command_printf("page page0");
            id(disp1).set_component_text_printf("Notifications.head", " ");
            id(disp1).set_component_text_printf("Notifications.body", " ");
            id(disp1).send_command_printf("page page0");
    # Service to send a command directly to the display. Useful for testing
    - service: send_command
      variables:
        cmd: string
      then:
        - lambda: 'id(disp1).send_command_printf("%s", cmd.c_str());'
    # Service to show a QR code on the display (ex. for WiFi password)
    - service: display_qr
      variables:
        qrdata: string
      then:
        - lambda: |-
            id(disp1).set_component_text_printf("QR.qr0", "%s", qrdata.c_str());
            id(disp1).send_command_printf("page QR");
        - delay: 15s
        - lambda: |-
            id(disp1).send_command_printf("page page0");
            id(disp1).send_command_printf("QR.qr0.txt=");
            id(disp1).send_command_printf("page page0");
    # Service to wake up screen
    - service: wakeup_screen
      then:
        - lambda: |-
            id(disp1).send_command_printf("page page0");


# Time component that fetches time from Home Assistant and updates the display once a minute and when the display is ready at bootup (and time is available).
time:
  - platform: homeassistant
    id: homeassistant_time
    on_time:
      - seconds: 0
        minutes: /1
        then:
          - lambda: id(disp1).set_component_text_printf("Home.time", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
          - lambda: id(disp1).set_component_text_printf("Home.date", "%i-%02i-%02i", id(homeassistant_time).now().year, id(homeassistant_time).now().month, id(homeassistant_time).now().day_of_month);
    on_time_sync:
        then:
          - wait_until:
              switch.is_on: nextion_init
          - lambda: id(disp1).set_component_text_printf("Home.time", "%02i:%02i", id(homeassistant_time).now().hour, id(homeassistant_time).now().minute);
          - lambda: id(disp1).set_component_text_printf("Home.date", "%i-%02i-%02i", id(homeassistant_time).now().year, id(homeassistant_time).now().month, id(homeassistant_time).now().day_of_month);
          

# Logger. Disable the temperature sensor etc. to focus on the HMI development
logger:
  baud_rate: 115200
  level: DEBUG
  logs:
    sensor: WARN
    resistance: WARN
    text_sensor: WARN
    ntc: WARN
    #nextion: VERBOSE

# OTA (Over the air updates) password. Add to your secrets.yaml
ota:
  password: !secret ota_pwd

# Uart for the Nextion display
uart:
  tx_pin: 16
  rx_pin: 17
  baud_rate: 115200
  id: tf_uart

# Functionality for the Nextion display
#external_components:
#  - source: github://fluce/esphome@dev
#    components: [nextion]
#    refresh: 30s

# A reboot button is always useful
button:
  - platform: restart
    name: $device_name Restart

# Binary sensors
binary_sensor:
  # Left button below the display
  - platform: gpio
    name: $device_name Left Button
    pin:
      number: 14
      inverted: true
    on_click:
      - lambda: id(disp1).dump_config();

  # Right button below the display
  - platform: gpio
    name: $device_name Right Button    
    pin:
      number: 27
      inverted: true
    on_click:
      - logger.log: "Click !"
      - lambda: try_mode=1-try_mode;
      - switch.toggle: relay_2

  - platform: nextion
    name: $device_name SetTemp plus
    id: settemp_plus
    page_id: 1
    component_id: 4
    on_click:
      - number.increment: settemp     
    on_multi_click:
      #Hold
      - timing:
          - ON for at least 0.75s
        then:
          - while:
              condition:
                binary_sensor.is_on: settemp_plus
              then:
                - lambda: |-
                    auto call=id(settemp).make_call();
                    call.number_increment(true);
                    call.perform();
                - delay: 0.25s            

  - platform: nextion
    name: $device_name SetTemp minus
    id: settemp_minus
    page_id: 1
    component_id: 5
    on_click:
      - number.decrement: settemp     
    on_multi_click:
      #Hold
      - timing:
          - ON for at least 0.75s
        then:
          - while:
              condition:
                binary_sensor.is_on: settemp_minus
              then:
                - lambda: |-
                    auto call=id(settemp).make_call();
                    call.number_decrement(true);
                    call.perform();
                - delay: 0.25s            


  - platform: nextion
    name: $device_name Preset boost
    id: preset_boost
    page_id: 1
    component_id: 12
    on_click:
      - climate.control:
          id: my_climate
          preset: BOOST     

  - platform: nextion
    name: $device_name Preset comfort
    id: preset_comfort
    page_id: 1
    component_id: 13
    on_click:
      - climate.control:
          id: my_climate
          preset: COMFORT     

  - platform: nextion
    name: $device_name Preset eco
    id: preset_eco
    page_id: 1
    component_id: 14
    on_click:
      - climate.control:
          id: my_climate
          preset: ECO

  - platform: nextion
    name: $device_name Preset freeze
    id: preset_freeze
    page_id: 1
    component_id: 15
    on_click:
      - climate.control:
          id: my_climate
          custom_preset: ${freeze_preset_name}

  - platform: nextion
    name: $device_name Preset auto
    id: preset_auto
    page_id: 1
    component_id: 16
    on_click:
      - climate.control:
          id: my_climate
          custom_preset: ${auto_preset_name}

  - platform: homeassistant
    name: master_trigger
    entity_id: ${master_trigger_id}
    publish_initial_state: true
    on_press:
      then:
        - logger.log: master trigger started
        - lambda: master_trigger = 1; auto_refresh();
    on_release:
      then:
        - logger.log: master trigger stopped
        - lambda: master_trigger = 0; auto_refresh();


  - platform: homeassistant
    name: auto_trigger_1
    entity_id: ${auto_trigger_1_id}
    publish_initial_state: true
    on_press:
      then:
        - logger.log: trigger 1 started
        - lambda: auto_trigger |= 1; auto_refresh();
    on_release:
      then:
        - logger.log: trigger 1 stopped
        - lambda: auto_trigger &= ~1; auto_refresh();
    
  - platform: homeassistant
    name: auto_trigger_2
    entity_id: ${auto_trigger_2_id}
    publish_initial_state: true
    on_press:
      then:
        - logger.log: trigger 2 started
        - lambda: auto_trigger |= 2; auto_refresh();
    on_release:
      then:
        - logger.log: trigger 2 stopped
        - lambda: auto_trigger &= ~2; auto_refresh();

  - platform: homeassistant
    name: auto_trigger_3
    entity_id: ${auto_trigger_3_id}
    publish_initial_state: true
    on_press:
      then:
        - logger.log: trigger 3 started
        - lambda: auto_trigger |= 4; auto_refresh();
    on_release:
      then:
        - logger.log: trigger 3 stopped
        - lambda: auto_trigger &= ~4; auto_refresh();

  - platform: homeassistant
    name: auto_trigger_4
    entity_id: ${auto_trigger_4_id}
    publish_initial_state: true
    on_press:
      then:
        - logger.log: trigger 4 started
        - lambda: auto_trigger |= 8; auto_refresh();
    on_release:
      then:
        - logger.log: trigger 4 stopped
        - lambda: auto_trigger &= ~8; auto_refresh();

  - platform: homeassistant
    name: auto_trigger_5
    entity_id: ${auto_trigger_5_id}
    publish_initial_state: true
    on_press:
      then:
        - logger.log: trigger 5 started
        - lambda: auto_trigger |= 16; auto_refresh();
    on_release:
      then:
        - logger.log: trigger 5 stopped
        - lambda: auto_trigger &= ~16; auto_refresh();

  - platform: template
    name: CalcRelay
    lambda: |-
      return (auto_mode && master_trigger && auto_trigger) || id(switch_thermostat).state;
    on_press:
      then: 
        - switch.turn_on: relay_1
    on_release:
      then: 
        - switch.turn_off: relay_1

output:
  # Buzzer for playing tones
  - platform: ledc
    id: buzzer_out
    pin:
      number: 21
      
switch:

  - platform: template
    id: switch_thermostat  
    optimistic: true  

  # Physical relay 1
  - platform: gpio
    name: $device_name Relay 1
    id: relay_1
    pin:
      number: 22
    on_turn_on:
      then:
        - logger.log: "Relay 1 ON"
        - lambda: id(disp1).send_command_printf("page0.heating.txt=\"A\"");
    on_turn_off:
      then:
        - logger.log: "Relay 1 OFF"
        - lambda: id(disp1).send_command_printf("page0.heating.txt=\"\"");

  # Physical relay 2
  - platform: gpio
    name: $device_name Relay 2
    id: relay_2
    pin:
      number: 19

  # Turn screen power on/off. Easy way to configure the screen power control, but this should not be used from HA, as all components must be re-initialized afterwards. For lights, names of lights etc. this practically means that the state must change once to happen.
  - platform: gpio
    name: $device_name Screen Power
    id: screen_power
    entity_category: config
    pin:
      number: 4
      inverted: true
    restore_mode: ALWAYS_ON

  # Basically a global variable to keep track on whether the Nextion display is ready or not. Delays initial info from HA to the display.
  - platform: template
    name: $device_name Nextion inited
    id: nextion_init
    entity_category: config
    restore_state: false
    assumed_state: off
    optimistic: true
    
  # Show alarm screen on the display and disable it (except for physical buttons).
  - platform: template
    name: $device_name Alarm screen
    id: alarm_activated
    restore_state: false
    assumed_state: off
    optimistic: true
    on_turn_on:
      - lambda: id(disp1).send_command_printf("page Alarm");
    on_turn_off:
      - lambda: id(disp1).send_command_printf("page page0");

  # Disable Dim-down-function on screen
  - platform: template
    name: $device_name Disable dim-down
    id: disp1_disdim
    restore_state: true
    assumed_state: off
    optimistic: true
    on_turn_on:
      - lambda: id(disp1).send_command_printf("Home.disdim.val=1");
    on_turn_off:
      - lambda: id(disp1).send_command_printf("Home.disdim.val=0");

  # Disable Screensaver-function on screen
  - platform: template
    name: $device_name Disable screensaver
    id: disp1_dissleep
    restore_state: true
    assumed_state: off
    optimistic: true
    on_turn_on:
      - lambda: id(disp1).send_command_printf("Home.dissleep.val=1");
    on_turn_off:
      - lambda: id(disp1).send_command_printf("Home.dissleep.val=0");

  # Disable Go to Home page-function on screen
  - platform: template
    name: $device_name Disable go to home
    id: disp1_disgth
    restore_state: true
    assumed_state: off
    optimistic: true
    on_turn_on:
      - lambda: id(disp1).send_command_printf("Home.disgth.val=1");
    on_turn_off:
      - lambda: id(disp1).send_command_printf("Home.disgth.val=0");


# Rtttl function for buzzer
rtttl:
  id: buzzer
  output: buzzer_out

sensor:
  # Internal temperature sensor, adc value
  - platform: adc
    id: ntc_source
    pin: 38
    update_interval: 10s
    attenuation: 11db

  # Internal temperature sensor, adc reading converted to resistance (calculation) 
  - platform: resistance
    id: resistance_sensor
    sensor: ntc_source
    configuration: DOWNSTREAM
    resistor: 11.2kOhm

  # Internal temperature sensor, resistance to temperature (calculation)
  - platform: ntc
    id: temperature
    sensor: resistance_sensor
    calibration:
      b_constant: 3950
      reference_temperature: 25°C
      reference_resistance: 10kOhm
    name: $device_name Temperature
    filters:
      - median:
          window_size: 7
          send_every: 4
          send_first_at: 3   
    on_value:
      then:
        - lambda: id(disp1).set_component_text_printf("page0.temp", "%i,%i", int(x),int((x-int(x))*10));

  # Uptime for the display. Also updates a human readable one (further down)
  - platform: uptime
    name: $device_name Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
                int seconds = round(id(uptime_sensor).raw_state);
                int days = seconds / (24 * 3600);
                seconds = seconds % (24 * 3600);
                int hours = seconds / 3600;
                seconds = seconds % 3600;
                int minutes = seconds /  60;
                seconds = seconds % 60;
                return (
                  (days ? to_string(days) + "d " : "") +
                  (hours ? to_string(hours) + "h " : "") +
                  (minutes ? to_string(minutes) + "m " : "") +
                  (to_string(seconds) + "s")
                ).c_str();

  # WiFi signals strength sensor
  - platform: wifi_signal
    name: $device_name WiFi Signal Sensor
    update_interval: 60s

  # Current page displayed on the HMi
  - platform: nextion
    name: $device_name Current display page
    id: disp1_current_page
    variable_name: dp
    update_interval: 1s

  # Temperature outside, fetched from HA
  - platform: homeassistant
    id: current_temperature
    entity_id: weather.home
    attribute: temperature
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: id(disp1).set_component_text_printf("Home.temp", "%.1f", id(current_temperature).state);

  # Temperature outside feels like, fetched from HA
  - platform: homeassistant
    id: temp_feelslike
    entity_id: sensor.home_temperature_feels_like
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: id(disp1).set_component_text_printf("Home.tempfl", "%.1f", id(temp_feelslike).state);

text_sensor:
  # IP address of device. Not really needed for HA (as HA already knows it), but for showing on the display during startup. The startup screen will leave on if no instance connects to the API.
  - platform: wifi_info
    ip_address:
      name: $device_name IP address
      id: ip_address
      on_value:
        then:
          - wait_until:
              switch.is_on: nextion_init
          - lambda: id(disp1).set_component_text_printf("Connecting.ip_addr", "%s", id(ip_address).state.c_str());

  # Uptime in a human readable form. Updated from the uptime sensor
  - platform: template
    name: $device_name Uptime Human Readable
    id: uptime_human
    icon: mdi:clock-start

  # ESPHome version used to compile the app
  - platform: version
    name: $device_name ESPHome Version

  # Sun sensor from HA. Used to decide whether a sun or moon weather symbol should be used.
  - platform: homeassistant
    id: sun_sun
    entity_id: sun.sun

  # Weather symbol, HA weather entity to pull data from
  - platform: homeassistant
    id: weather_symbol
    entity_id: weather.maison_hourly
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: |-
            char symbol=' ';
            ESP_LOGD("custom", "%s", id(weather_symbol).state.c_str());
            if (id(weather_symbol).state == "clear-night") {
              symbol='a';
            } else if (id(weather_symbol).state == "cloudy") {
              symbol='b';
              if (id(sun_sun).state == "below_horizon") {
                symbol='c';
              }
            } else if (id(weather_symbol).state == "fog") {
              symbol='d';
            } else if (id(weather_symbol).state == "hail") {
              symbol='e';
            } else if (id(weather_symbol).state == "snowy-rainy") {
              symbol='e';
            } else if (id(weather_symbol).state == "lightning") {
              symbol='f';
            } else if (id(weather_symbol).state == "lightning-rainy") {
              symbol='g';
              if (id(sun_sun).state == "below_horizon") {
                symbol='i';
              }
            } else if (id(weather_symbol).state == "exceptional") {
              symbol='h';
              if (id(sun_sun).state == "below_horizon") {
                symbol='j';
              }
            } else if (id(weather_symbol).state == "partlycloudy") {
              symbol='k';
              if (id(sun_sun).state == "below_horizon") {
                symbol='l';
              }
            } else if (id(weather_symbol).state == "pouring") {
              symbol='m';
            } else if (id(weather_symbol).state == "rainy") {
              symbol='e';
            } else if (id(weather_symbol).state == "snowy") {
              symbol='n';
            } else if (id(weather_symbol).state == "sunny") {
              symbol='o';
              if (id(sun_sun).state == "below_horizon") {
                symbol = 'a';
              }
            } else if (id(weather_symbol).state == "windy") {
              symbol='p';              
            } else if (id(weather_symbol).state == "windy-variant") {
              symbol='q';              
            };
            ESP_LOGD("custom", "symbol: %c", symbol);
            id(disp1).send_command_printf("page0.weather.txt=\"%c\"", symbol);

  # Home page, text line 1 (lower right part of screen)
  - platform: homeassistant
    id: home_text1
    entity_id: sensor.nspanel_v90_range
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: id(disp1).set_component_text_printf("Home.text1", "%s", id(home_text1).state.c_str());
        
  # Home page, text line 2 (lower right part of screen)
  - platform: homeassistant
    id: home_text2
    entity_id: sensor.nspanel_id4_range
    on_value:
      then:
        - wait_until:
            switch.is_on: nextion_init
        - lambda: id(disp1).set_component_text_printf("Home.text2", "%s", id(home_text2).state.c_str());


number:

  - platform: template
    name: $device_name Set Temp
    id: settemp
    optimistic: true
    min_value: 5
    max_value: 30
    step: 0.5
    restore_value: true
    initial_value: 19
    on_value:
      then:
        - lambda: id(disp1).set_component_text_printf("page0.settemp", "%i,%i°", int(x),int((x-int(x))*10));
        - climate.control:
            id: my_climate
            mode: HEAT
            target_temperature: !lambda |-
              return x;

  - platform: template
    name: $device_name Freeze preset
    id: freeze_preset_temp
    optimistic: true
    min_value: 5
    max_value: 15
    step: 0.5
    restore_value: true
    initial_value: 8
    on_value:
      then: 
        - lambda: |-
            ESP_LOGD("climate","SetValue freeze=> %f",x);
            thermostat_thermostatclimatetargettempconfig.default_temperature=x;            
            id(my_climate).set_custom_preset_config("${freeze_preset_name}",thermostat_thermostatclimatetargettempconfig);
        - if:
            condition: 
              - lambda: return id(my_climate).custom_preset=="${freeze_preset_name}";
            then:
              - climate.control:
                  id: my_climate
                  custom_preset: ${freeze_preset_name}

  - platform: template
    name: $device_name Comfort preset
    id: comfort_preset_temp
    optimistic: true
    min_value: 15
    max_value: 25
    step: 0.5
    restore_value: true
    initial_value: 20
    on_value:
      then: 
        - lambda: |-
            ESP_LOGD("climate","SetValue comfort => %f",x);
            thermostat_thermostatclimatetargettempconfig_2.default_temperature=x;            
            id(my_climate).set_preset_config(climate::CLIMATE_PRESET_COMFORT,thermostat_thermostatclimatetargettempconfig_2);
        - if:
            condition: 
              - lambda: return id(my_climate).preset==climate::CLIMATE_PRESET_COMFORT;
            then:
              - climate.control:
                  id: my_climate
                  preset: comfort

  - platform: template
    name: $device_name Eco preset
    id: eco_preset_temp
    optimistic: true
    min_value: 15
    max_value: 25
    step: 0.5
    restore_value: true
    initial_value: 17
    on_value:
      then: 
        - lambda: |-
            ESP_LOGD("climate","SetValue eco => %f",x);
            thermostat_thermostatclimatetargettempconfig_3.default_temperature=x;            
            id(my_climate).set_preset_config(climate::CLIMATE_PRESET_ECO,thermostat_thermostatclimatetargettempconfig_3);
        - if:
            condition: 
              - lambda: return id(my_climate).preset==climate::CLIMATE_PRESET_ECO;
            then:
              - climate.control:
                  id: my_climate
                  preset: eco

  - platform: template
    name: $device_name Auto min
    id: auto_min_temp
    optimistic: true
    min_value: 15
    max_value: 25
    step: 0.5
    restore_value: true
    initial_value: 17
    on_value:
      then: 
        - lambda: |-
            ESP_LOGD("climate","SetValue auto min => %f",x);
            thermostat_thermostatclimatetargettempconfig_5.default_temperature=x;            
            id(my_climate).set_custom_preset_config("${auto_preset_name}",thermostat_thermostatclimatetargettempconfig_5);
        - if:
            condition: 
              - lambda: return id(my_climate).custom_preset=="${auto_preset_name}";
            then:
              - climate.control:
                  id: my_climate
                  custom_preset: ${auto_preset_name}

  - platform: template
    name: $device_name Auto max
    id: auto_max_temp
    optimistic: true
    min_value: 15
    max_value: 25
    step: 0.5
    restore_value: true
    initial_value: 22
    on_value:
      then: 
        - lambda: |-
            ESP_LOGD("climate","SetValue auto max => %f",x);

  - platform: template
    name: $device_name Boost preset
    id: boost_preset_temp
    optimistic: true
    min_value: 15
    max_value: 25
    step: 0.5
    restore_value: true
    initial_value: 24
    on_value:
      then: 
        - lambda: |-
            ESP_LOGD("climate","SetValue boost => %f",x);
            thermostat_thermostatclimatetargettempconfig_4.default_temperature=x;            
            id(my_climate).set_preset_config(climate::CLIMATE_PRESET_BOOST,thermostat_thermostatclimatetargettempconfig_4);
        - if:
            condition: 
              - lambda: return id(my_climate).preset==climate::CLIMATE_PRESET_BOOST;
            then:
              - climate.control:
                  id: my_climate
                  preset: boost

  # Screen brightness
  - platform: template
    name: $device_name Brightness
    id: brightness
    entity_category: config
    unit_of_measurement: '%'
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 30
    set_action:
      then:
        - lambda: 'id(disp1).set_backlight_brightness(x/100);'
        - lambda: 'id(disp1).send_command_printf("Home.brightness.val=%i", int(x));'

  # Screen brightness dimmed down
  - platform: template
    name: $device_name Brightness dimdown
    id: brightness_dim
    entity_category: config
    unit_of_measurement: '%'
    min_value: 0
    max_value: 100
    step: 1
    initial_value: 1
    set_action:
      then:
        - lambda: 'id(disp1).send_command_printf("Home.brightdd.val=%i", int(x));'

# Example single-point configuration entry (for heating only)
climate:
  - platform: thermostat
    name: "Thermostat Climate Controller"
    id: my_climate
    sensor: temperature
    min_heating_off_time: 3s
    min_heating_run_time: 3s
    min_idle_time: 3s
    visual:
      min_temperature: 5 °C
      max_temperature: 30 °C
    heat_action:
      then:
        - logger.log: "Heat action"
        - switch.turn_on: switch_thermostat
    idle_action:
      then:
        - logger.log: "Idle action"
        - switch.turn_off: switch_thermostat
    default_preset: ${auto_preset_name}
    on_boot_restore_from: memory
    preset:
      - name: ${freeze_preset_name}
        default_target_temperature_low: 7 °C
        mode: heat
      - name: comfort
        default_target_temperature_low: 20 °C
        mode: heat
      - name: eco
        default_target_temperature_low: 17 °C
        mode: heat
      - name: boost
        default_target_temperature_low: 24 °C
        mode: heat
      - name: ${auto_preset_name}
        default_target_temperature_low: 17 °C
        mode: heat
    preset_change:
      then:
        - logger.log: Preset has been changed!
        - lambda: |-
            ESP_LOGD("climate","try_mode=%d",try_mode);
            if (id(my_climate).next_preset.has_value())
              ESP_LOGD("climate","preset=%d",id(my_climate).next_preset.value());
            if (id(my_climate).next_custom_preset.has_value())
              ESP_LOGD("climate","preset=%s",id(my_climate).next_custom_preset.value().c_str());

            auto c=map_preset_to_component(id(my_climate).next_preset,id(my_climate).next_custom_preset);            
            ESP_LOGD("climate","c=%d",c);
            
            auto_mode=0;
            if (c) {
              id(disp1).send_command_printf("page0.%s.pco=65504", c);            
              if (strcmp(c,"ps_auto")==0) {
                auto_mode=1;
              }
            }
            
            auto c_old=map_preset_to_component(id(my_climate).preset,id(my_climate).custom_preset);            
            ESP_LOGD("climate","c_old=%d",c_old);
            if (c_old)
              id(disp1).send_command_printf("page0.%s.pco=44405", c_old);
            if (id(my_climate).next_custom_preset.has_value() && id(my_climate).next_custom_preset.value()==preset_name_auto)
            {
              ESP_LOGD("climate","auto_display=%s",auto_display);
              id(disp1).send_command_printf("page0.auto_sources.txt=\"%s\"",auto_display);
            } else {
              ESP_LOGD("climate","clear auto_display");
              id(disp1).send_command_printf("page0.auto_sources.txt=\"\"");
            }

    target_temperature_change_action:
      then:
        # - number.set:
        #     id: settemp
        #     value: !lambda |-
        #       return id(my_climate).target_temperature; 
        - logger.log: "I am in target_temperature_change_action"
        - lambda: |-
            ESP_LOGD("climate","loop control begin=%d",loop_control);
            loop_control++;
        - if:
            condition: 
              lambda: return loop_control==1;
            then:            
              - number.set:
                  id: settemp
                  value: !lambda |-
                    return id(my_climate).target_temperature; 
        - lambda: |-
            loop_control--;
            ESP_LOGD("climate","loop control end=%d",loop_control);

# Configure the screen itself
display:
  - platform: nextion
    id: disp1
    uart_id: tf_uart
    tft_url: !secret nextion_update_url
    # A little fun...
    on_setup:
      then:
        - lambda: id(disp1).send_command_printf("lcd_dev fffb 0002 0000 0020"); # Magic command to avoid 32pixel touchscreen offset on NSPanel (https://github.com/UNUF/nxt-doc/blob/main/Protocols/Full%20Instruction%20Set.md#readme)
        - lambda: id(disp1).send_command_printf("DRAKJHSUYDGBNCJHGJKSHBDN");       
        - number.set:
            id: brightness
            value: 30
        - lambda: id(disp1).send_command_printf("page Connecting");
        - wait_until:
            api.connected
        - switch.template.publish:
            id: nextion_init
            state: on
        - if:
            condition:
              - switch.is_on: alarm_activated
            then:
              - lambda: id(disp1).send_command_printf("page Alarm");
            else:
              - delay: 5s
              - lambda: id(disp1).send_command_printf("page page0");
        - lambda: |-
            auto x=id(settemp).state;
            id(disp1).set_component_text_printf("page0.settemp", "%i,%i°", int(x),int((x-int(x))*10));
        - lambda: |-
            auto x=id(relay_1).state;
            if (x)
              id(disp1).send_command_printf("page0.heating.txt=\"A\"");
            else
              id(disp1).send_command_printf("page0.heating.txt=\"\"");
